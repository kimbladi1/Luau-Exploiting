setfpscap(240)


getgenv().Settings = { -- don't touch the globals : )
    Enabled = false,

    __SilentAimToggled = false,
    __AimlockToggled = false,
    __AllowAimlock = false
}


local Config = {
    WindowName = " [ Da Hood Rev Trainer ] | [ Made By : sinkZ#6982 ] ",
    Color = Color3.fromRGB(255,128,64),
    Keybind = Enum.KeyCode.RightBracket
}

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexR32/Bracket/main/BracketV3.lua"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local __Tab1 = Window:CreateTab("Main")
local __Tab2 = Window:CreateTab("UI Settings")

local __AimSection = __Tab1:CreateSection("Aim Section")
local __SettingsSection = __Tab2:CreateSection("Settings Section")

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera


__GetClosestPlayer = function()
    local ClosestPlayer = nil
    local ClosestDistance = math.huge

    for i,v in next, Players:GetPlayers() do 
        if v ~= Player and v.Character and v.Character.FindFirstChild(v.Character, "Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character.PrimaryPart ~= nil then

            local ScreenPosition, Visible = Camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            
            if Visible then
                local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPosition.X, ScreenPosition.Y)).Magnitude

                if Distance < ClosestDistance then  
                    ClosestPlayer = v
                    ClosestDistance = Distance     
                end
            end
        end
    end
    return (ClosestPlayer)
end

__SetPrediction = function()
    return (__GetClosestPlayer().Character.HumanoidRootPart.Velocity / 5.5)
end

__AimSection:CreateToggle("Silent Aim", nil, function(SilentAimToggled : boolean?)
    getgenv().Settings.__SilentAimToggled = SilentAimToggled 

    local __OldIndex = nil   
     __OldIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Index) 
        if (Self:IsA("Mouse")) and (getgenv().Settings.__SilentAimToggled) and (Index == "Hit") or (Index == "Target") then
            --return (Index == "Hit" and __GetClosestPlayer().Character.HumanoidRootPart.CFrame + Vector3.new(__GetClosestPlayer().Character.HumanoidRootPart.Velocity.X / 5, __GetClosestPlayer().Character.HumanoidRootPart.Velocity.X / 7, __GetClosestPlayer().Character.HumanoidRootPart.Velocity.Z / 5))
            return (Index == "Hit" and __GetClosestPlayer().Character.HumanoidRootPart.CFrame + __SetPrediction()) -- Temp fix for shitty prediction calc's
        end
        return __OldIndex(Self, Index)
    end))
end)

__AimSection:CreateToggle("Aimlock", nil, function(AimlockToggled : boolean?)
    getgenv().Settings.__AllowAimlock = AimlockToggled
end)

UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 and not GameProcessed then
        getgenv().Settings.__AimlockToggled = true

        while task.wait() do
            if not getgenv().Settings.__AllowAimlock then return end
            if not getgenv().Settings.__AimlockToggled then return end
            Camera.CFrame = CFrame.new(Camera.CFrame.p, __GetClosestPlayer().Character.Head.Position + __SetPrediction()) 
        end
    end
end)

UserInputService.InputEnded:Connect(function(Input) 
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        getgenv().Settings.__AimlockToggled = false
    end
end)

print("executed")
